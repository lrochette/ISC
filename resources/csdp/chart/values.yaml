gitops-runtime:
  global:
    codefresh:
      accountId: 600edc0bdffeb2bc4981d15a
      userToken:
        secretKeyRef:
          name: codefresh-user-token
          key: token
    runtime:
      isConfigurationRuntime: true
      ingress:
        className: nginx-public
        enabled: false
      name: csdp
  installer:
    skipValidation: true
  app-proxy:
    config:
      logLevel: trace
      graphqlPlayground: "true"
    env:
      GRAPHQL_INTROSPECTION: "true"

  # gitops-operator:
  #   env:
  #     PROMOTION_WRAPPER_TEMPLATE: promotion-wrapper-haleon
  argo-workflows:
    controller:
      workflowDefaults:
        spec:
          archiveLogs: true
          artifactRepositoryRef:
            configMap: codefresh-workflows-log-store
            key: codefresh-workflows-log-store
    artifactRepositoryRef:
      codefresh-workflows-log-store:
        archiveLogs: true
        codefresh-workflows-log-store:
          s3:
            bucket: 600edc0bdffeb2bc4981d15a
            endpoint: gitops-workflow-logs.codefresh.io
            insecure: false
            keyFormat: 'csdp/{{workflow.name}}/{{pod.name}}'
            accessKeySecret:
              name: codefresh-token
              key: token
            secretKeySecret:
              name: codefresh-token
              key: token
  argo-cd:
    configs:
      cm:
        application.resourceTrackingMethod: "annotation+label"
      params:
        applicationsetcontroller.enable.github.api.metrics: "true"
    server:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
      replicas: 2
      resources:
        requests:
          cpu: '0.3'
          memory: 400Mi
    applicationSet:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
    commitServer:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
    notifications:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
    redis:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
    controller:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
    repoServer:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: kube-prometheus-stack
    acrController:
      enabled: true
    eventReporter:
      env:
        - name: USE_GRPC
          value: 'false'
      replicas: 4
